//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "account")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub created_at: DateTime,
    pub account_name: String,
    pub two_factor_auth: bool,
    pub recovery: Option<String>,
    pub user_id: i32,
    pub bucket_id: Option<i32>,
    pub institution_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::bucket::Entity",
        from = "Column::BucketId",
        to = "super::bucket::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Bucket,
    #[sea_orm(
        belongs_to = "super::institution::Entity",
        from = "Column::InstitutionId",
        to = "super::institution::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Institution,
    #[sea_orm(has_many = "super::secure_account::Entity")]
    SecureAccount,
    #[sea_orm(has_many = "super::sso_account::Entity")]
    SsoAccount,
    #[sea_orm(has_many = "super::super_secure_account::Entity")]
    SuperSecureAccount,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    User,
}

impl Related<super::bucket::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Bucket.def()
    }
}

impl Related<super::institution::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Institution.def()
    }
}

impl Related<super::secure_account::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SecureAccount.def()
    }
}

impl Related<super::sso_account::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SsoAccount.def()
    }
}

impl Related<super::super_secure_account::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SuperSecureAccount.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
